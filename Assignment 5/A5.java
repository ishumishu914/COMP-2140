import java.io.*;
import java.util.ArrayList;

public class A5 
{
    static int pointer = -1;	
	static ArrayList tokens = new ArrayList();

    public A5()
    {
        super();
    }

    public static void main(String[] args) throws Exception 
    {
        // construct the token array
        BufferedWriter bw = new BufferedWriter( new FileWriter("a5.output"));
        A5Scanner scanner = new A5Scanner( new FileInputStream ( new File ("A5.tiny")));
        // note that yylex () is the default method to get the next token in scanner that is
        //generated by JLlex .
        Symbol token;
        while (( token = scanner.yylex()).sym != A5Sym.EOF) 
        {
            tokens.add(token);
        }
        tokens.add(token); // add EOF as the last token in the array
        boolean legal = program() && nextToken().sym == A5Sym.EOF;
        bw.write((legal)?"legal":"illegal");
        bw.close();
    }

    static Symbol nextToken() 
	{
		if (pointer < tokens.size()-1) 
		{
			pointer++;
			Symbol token = (Symbol) tokens.get(pointer);
			System.out.println ("next Token: " + token.toString());
			return token;
		} else
			return null;
	}

    /** program-->method program
        program-->method
        program-->statement program
	    program-->statement
	*/
	static boolean program() throws Exception
	{
		int savePointer = pointer;
        if (methodDecl()) 
        {
			System.out.println("      program-->method");
			return true;
		}
		pointer = savePointer;
        if (methodDecl() && program()) 
        {
			System.out.println("      program-->method program");
			return true;
		}
		pointer = savePointer;
		return false;
	}

    static boolean program2() throws Exception 
    {
        int savePointer = pointer;
        if (methodDecl() && program2()) {
            return true;
        }
        pointer = savePointer;
        return true;
    }

    /** methoddecl-->type MAIN ID (formalparamL) block
     *  methoddecl--> type ID (formalparamL) block
     */

    static boolean methodDecl() throws Exception
    {
        int savePointer = pointer;

        if (type() && nextToken().sym==A5Sym.MAIN && 
        nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.LPAREN && 
        formalParamL() && nextToken().sym==A5Sym.RPAREN && block()) 
        {
            return true;
        }
        
        pointer = savePointer;
        if (type() && nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.LPAREN && 
        formalParamL() && nextToken().sym==A5Sym.RPAREN && block()) 
            return true;    
        
        pointer = savePointer;
        return false;
    }

    /** formalparamL--> empty | formalparam | formalparam,formalparamL
     */
    static boolean formalParamL() throws Exception
    {
        int savePointer = pointer;
        if (formalParam() || formalParam() && nextToken().sym==A5Sym.COMMA && formalParamL()) 
            return true;
        pointer = savePointer;
        return true;
    }

    //  formalparam--> type ID

    static boolean formalParam() throws Exception
    {
        int savedPointer = pointer;
        if (type() && nextToken().sym==A5Sym.ID) 
            return true;    
        pointer = savedPointer;
        return false;
    }

    /** statement--> block
        statement--> localvar
        statement--> assignment
        statement--> return
        statement--> if
        statement--> write
        statement--> read
     */

    static boolean statement() throws Exception 
	{
		int savePointer = pointer;
        if (block()) 
        {
			System.out.println("      statement-->block;");
			return true;
		}
		pointer = savePointer;
		if (assignment() && nextToken().sym == A5Sym.SEMI) 
		{
			System.out.println("      statement-->assignment;");
			return true;
		}
		pointer = savePointer;
        if (localVar()) 
		{
			System.out.println("      statement-->localVar;");
			return true;
		}
		pointer = savePointer;
        if (returnStmt()) 
		{
			System.out.println("      statement-->returnStmt;");
			return true;
		}
		pointer = savePointer;
        if (ifStmt()) 
		{
			System.out.println("      statement-->ifStmt;");
			return true;
		}
		pointer = savePointer;
        if (writeStmt()) 
		{
			System.out.println("      statement-->writeStmt;");
			return true;
		}
		pointer = savePointer;
        if (readStmt()) 
		{
			System.out.println("      statement-->readStmt;");
			return true;
		}
		pointer = savePointer;
		return false;
	}

    static boolean block() throws Exception
    {
        int savePointer = pointer;
        if (nextToken().sym == A5Sym.BEGIN && stmtL() && nextToken().sym == A5Sym.END) 
        {
            System.out.println("      block-->BEGIN statement+ END ;");
			return true;
		}
		pointer = savePointer;    
        return false;
    }

    static boolean stmtL() throws Exception
    {
        int savePointer = pointer;
        if (statement() || statement() && stmtL()) 
			return true;
		
		pointer = savePointer;    
        return false;
    }

    static boolean type() throws Exception
    {
        int savePointer = pointer;
        if (nextToken().sym==A5Sym.INT || nextToken().sym==A5Sym.REAL || nextToken().sym==A5Sym.STRING) 
        {
            return true;    
        }
        pointer = savePointer;
        return false;
    }

    static boolean localVar() throws Exception
    {
        int savePointer = pointer;
        if (type() && nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.SEMI) 
		{
			System.out.println("      local var--> type ID;");
			return true;
		}
		pointer = savePointer;
        if (type() && assignment() && nextToken().sym==A5Sym.SEMI) 
		{
			System.out.println("      local var--> type assignstmt;");
			return true;
		}
		pointer = savePointer;
        return false;
    }

    //     assignment--> ID=exp
	
	static boolean assignment() throws Exception
	{
		int savePointer= pointer;
		if (nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.ASSIGN && expr()) 
		{
			System.out.println("      assignment--> ID=exp");
			return true;
		}
		pointer = savePointer;
        if (nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.ASSIGN && nextToken().sym==A5Sym.QUOTE) 
		{
			System.out.println("      assignment--> ID=quotes");
			return true;
		}
		pointer = savePointer;
		return false;
	}

    static boolean returnStmt() throws Exception
    {
        int savePointer = pointer;
        if (nextToken().sym==A5Sym.RETURN && expr() && nextToken().sym==A5Sym.SEMI) 
        {
			System.out.println("      returnStmt--> RETURN expression");
			return true;
		}
		pointer = savePointer;
		return false;
    }

    static boolean ifStmt() throws Exception
    {
        int savePointer = pointer;
        if (nextToken().sym==A5Sym.IF && nextToken().sym==A5Sym.LPAREN && boolExpr() && nextToken().sym==A5Sym.RPAREN && nextToken().sym==A5Sym.ELSE && statement()) 
        {
            System.out.println("      ifStmt--> IF (BoolExpression) Statement ELSE statement");
			return true;
        }
        pointer = savePointer;
        if (nextToken().sym==A5Sym.IF && nextToken().sym==A5Sym.LPAREN && boolExpr() && nextToken().sym==A5Sym.RPAREN && statement()) 
        {
			System.out.println("      ifStmt--> IF (BoolExpression) Statement");
			return true;
		}
		pointer = savePointer;
		return false;
    }

    static boolean writeStmt() throws Exception
    {
        int savePointer = pointer;
        if (nextToken().sym==A5Sym.WRITE && nextToken().sym==A5Sym.LPAREN && 
        expr() && nextToken().sym==A5Sym.COMMA && nextToken().sym==A5Sym.QUOTE && 
        nextToken().sym==A5Sym.RPAREN && nextToken().sym==A5Sym.SEMI) 
        {
            System.out.println("      writeStmt--> WRITE '(' Expression ',' QString ')' ';'");
			return true;
        }
        pointer = savePointer;
		return false;
    }

    static boolean readStmt() throws Exception
    {
        int savePointer = pointer;
        if (nextToken().sym==A5Sym.READ && nextToken().sym==A5Sym.LPAREN && 
        nextToken().sym==A5Sym.ID && nextToken().sym==A5Sym.COMMA && nextToken().sym==A5Sym.QUOTE && 
        nextToken().sym==A5Sym.RPAREN && nextToken().sym==A5Sym.SEMI) 
        {
            System.out.println("      readStmt--> READ '(' ID ',' QString ')' ';'");
			return true;
        }
        pointer = savePointer;
		return false;
    }
    
	/** expr--> term+expr
		expr--> term
	*/
	static boolean expr() throws Exception 
	{
		int savePointer = pointer;
		if (term() && nextToken().sym == A5Sym.PLUS && expr()) 
		{
			System.out.println("      expr-->term + expr");
			return true;
		}
		pointer = savePointer;
        if (term() && nextToken().sym == A5Sym.MINUS && expr()) 
		{
			System.out.println("      expr-->term - expr");
			return true;
		}
		pointer = savePointer;
		if (term()) {
			System.out.println("      expr-->term");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/** term --> factor * term
		term --> factor
	*/
	static boolean term() throws Exception 
	{
		int savePointer = pointer;
		if (factor() && nextToken().sym==A5Sym.TIMES && term()) 
		{
			System.out.println("      term-->factor * term");
			return true;
		}
		pointer = savePointer;
        if (factor() && nextToken().sym==A5Sym.DIVIDE && term()) 
		{
			System.out.println("      term-->factor * term");
			return true;
		}
		pointer = savePointer;
		if (factor()) {
			System.out.println("      term-->factor");
			return true;
		}
		pointer = savePointer;
		return false;
	}

	/** factor -->  functionCall | ID | Number | (Expr)
	*/
	static boolean factor() throws Exception
	{
		int savePointer = pointer;
		if (functionCall()) {
			System.out.println("factor --> functionCall");
			return true;
		}
		pointer=savePointer;
		int sym=nextToken().sym;
		if (sym == A5Sym.ID || sym == A5Sym.NUMBER) {
			System.out.println("      factor-->ID | NUMBER");
			return true;
		}
		pointer = savePointer;
		if (nextToken().sym==A5Sym.LPAREN && expr() && nextToken().sym==A5Sym.RPAREN) return true;
		pointer = savePointer;
		return false;
	}

    /** functionCall-->ID(actualParamL)
	*/
	static boolean functionCall() throws Exception  
	{
		int savePointer = pointer;
		if (nextToken().sym == A5Sym.ID
			&& nextToken().sym == A5Sym.LPAREN
			&& actualParamL()
			&& nextToken().sym == A5Sym.RPAREN)
			return true;
		pointer = savePointer;
		return false;
	}

    /** actualParamL --> expr actualParamL | empty 
	Note that actualParamL in our Tiny language is different--in Tiny there is a comma to separate two expressions. 
	You need to change this to parameter list. This example also explains how you deal with epsilon rule--you return true instead of false as in most other rules in the last line of the method. 
	*/
	static boolean actualParamL() throws Exception 
	{
		int savePointer=pointer;
		if (expr() || expr() && nextToken().sym==A5Sym.COMMA && actualParamL()) 
            return true;
		pointer = savePointer;
		return true;
	}

    static boolean boolExpr() throws Exception
    {
        int savePointer = pointer;
        if (expr() && nextToken().sym==A5Sym.EQUAL && expr()) 
        {
            System.out.println("      boolean expression-->expression == expression");
            return true;
        }
        pointer = savePointer;
        if (expr() && nextToken().sym==A5Sym.NOTEQUAL && expr()) 
        {
            System.out.println("      boolean expression-->expression == expression");
            return true;
        }
        pointer = savePointer;
        if (nextToken().sym==A5Sym.TRUE) 
        {
            System.out.println("      boolean expression-->true");
            return true;
        }
        pointer = savePointer;
        if (nextToken().sym==A5Sym.FALSE) 
        {
            System.out.println("      boolean expression-->false");
            return true;
        }
        pointer = savePointer;
        return false;
    }

}